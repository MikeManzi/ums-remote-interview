paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: Internal server error

  /users/new:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: User's first name
                lastName:
                  type: string
                  description: User's last name
                gender:
                  type: string
                  enum: [Male, Female]
                  description: User's gender
                dateOfBirth:
                  type: string
                  format: date
                  description: User's date of birth
                maritalStatus:
                  type: string
                  enum: [Single, Married, Divorced, Widowed]
                  description: User's marital status
                nationality:
                  type: string
                  description: User's nationality
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
                image:
                  type: string
                  format: binary
                  description: User's profile image
  /users/signin:
    post:
      tags:
        - Users
      summary: Sign in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the operation was successful
                  message:
                    type: string
                    description: Message indicating the status of the operation
                  status:
                    type: number
                    description: HTTP status code of the response
        "401":
          description: Invalid password or user not found
        "500":
          description: Internal server error
  /users/verify-otp:
    post:
      tags:
        - Users
      summary: Verify user OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: User's OTP
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  accessToken:
                    type: string
        "400":
          description: Invalid OTP
        "500":
          description: Internal server error

  /users/forgot-password:
    post:
      tags:
        - Users
      summary: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        "200":
          description: Password reset email sent successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

  /users/reset-password/{resetToken}:
    post:
      tags:
        - Users
      summary: Reset user's password
      parameters:
        - in: path
          name: resetToken
          required: true
          schema:
            type: string
          description: Reset token received by the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  description: User's new password
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid reset token
        "404":
          description: User not found
        "500":
          description: Internal server error

  /users/request-verification:
    post:
      tags:
        - Users
      summary: Request account verification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [NID, PASSPORT]
                  description: Type of user document
                number:
                  type: string
                  description: User document number
                image:
                  type: string
                  format: binary
                  description: User document image
      responses:
        "201":
          description: Account verification requested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDocument"
        "500":
          description: Internal server error
  /users/view-request/{id}:
    get:
      tags:
        - Users
      summary: View verification request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the verification request
      responses:
        "200":
          description: Verification request retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDocument"
        "404":
          description: Request not found
        "500":
          description: Internal server error

  /users/verify-account/{id}:
    put:
      tags:
        - Users
      summary: Verify user account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to verify
      responses:
        "200":
          description: Account verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: Internal server error

  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        gender:
          type: string
          enum: [Male, Female]
          description: User's gender
        dateOfBirth:
          type: string
          format: date
          description: User's date of birth
        maritalStatus:
          type: string
          enum: [Single, Married, Divorced, Widowed]
          description: User's marital status
        status:
          type: string
          enum: [Unverified, PendingVerification, Verified]
          description: User's status
        nationality:
          type: string
          description: User's nationality
        profile:
          type: string
          description: User's profile image URL
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [Admin, Normal]
          description: User's role
        resetPasswordToken:
          type: string
          description: User's password reset token
        resetPasswordExpires:
          type: number
          description: Expiration timestamp for password reset token
    UserDocument:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user document
        type:
          type: string
          enum: [NID, PASSPORT]
          description: Type of user document
        number:
          type: string
          description: User document number
        image:
          type: string
          description: User document image
        userId:
          type: string
          description: ID of the associated user
